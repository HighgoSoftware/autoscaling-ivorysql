#!/bin/sh

set -x

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# system mounts
mount -t proc proc /proc
mount -t sysfs sysfs /sys
mkdir -p /dev/pts
mount -t devpts devpts /dev/pts

mkdir -p /dev/shm
chmod 1777 /dev/shm
mount -t tmpfs tmp /dev/shm

#mount -t tmpfs -o size=32M none /tmp
#mount -t tmpfs -o size=32M none /run
#ln -s /proc/self/fd /dev/fd

# networking
ip link set up dev lo
ip link set up dev eth0
ip link set up dev eth1
udhcpc -q -i eth0
udhcpc -q -i eth1
ip address show
ip route show

# node_exporter metrics (/metrics on :9100)
run_metrics () {
    while true; do
        node_exporter 2>>/var/log/node_exporter >>/var/log/node_exporter
        echo "$(date -R): node_exporter exited, retrying in 1s" | tee -a /var/log/node_exporter
        sleep 1s
    done
}

run_metrics &

# postgresql init and start
export PGDATA=/mnt/data
mkdir -p $PGDATA /run/postgresql
chown -R postgres:postgres $PGDATA /run/postgresql
su-exec postgres pg_ctl init -o '--no-sync'
echo 'host all all 10.0.0.0/8     trust' | tee -a /mnt/data/pg_hba.conf
echo 'host all all 172.16.0.0/16  trust' | tee -a /mnt/data/pg_hba.conf
echo 'host all all 192.168.0.0/16 trust' | tee -a /mnt/data/pg_hba.conf
su-exec postgres pg_ctl start -o '-c config_file=/etc/postgresql.conf'

echo; cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2
echo -e "\nBoot took $(cut -d' ' -f1 /proc/uptime) seconds\n"

graceful () {
  su-exec postgres pg_ctl stop
  umount /mnt
  poweroff -f
}

trap graceful TERM INT KILL

# If we stored the ssh keys in the container data, they could be extracted.
echo "Generating sshd keys"
ssh-keygen -A

echo "Starting sshd"
while true; do
    # Having ssh troubles? Replace the sshd line with:
    #   setsid -w /usr/bin/sshd -dd
    # It'll print the logs directly here, with two debug levels. Then you can access them with
    # `kubectl logs <pod>` to see what's going on. (note: it exits after each connection ends)
    # For `ssh-into-vm.sh`, you can add debugging to the original ssh by adding `-vv` there.
    setsid -w /usr/sbin/sshd -D -E /var/log/sshd
    echo "$(date -R): sshd exited, retrying in 1s" | tee -a /var/log/sshd
    sleep 1s
done

echo "Exiting and shuting down vm"
graceful
